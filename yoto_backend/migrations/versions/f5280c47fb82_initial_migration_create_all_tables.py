"""Initial migration - create all tables

Revision ID: f5280c47fb82
Revises: 
Create Date: 2025-07-26 15:15:12.400054

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = 'f5280c47fb82'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('channels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('server_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('friendships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('friend_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'friend_id', name='uq_user_friend')
    )
    op.create_table('permission_audit_logs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('operation', sa.Enum('create', 'update', 'delete', 'assign', 'revoke'), nullable=False),
    sa.Column('resource_type', sa.Enum('role', 'permission', 'user_role', 'role_permission'), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.Column('old_values', mysql.JSON(), nullable=True),
    sa.Column('new_values', mysql.JSON(), nullable=True),
    sa.Column('operator_id', sa.Integer(), nullable=False),
    sa.Column('operator_ip', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('permission_audit_logs', schema=None) as batch_op:
        batch_op.create_index('idx_audit_log_operation', ['operation', 'created_at'], unique=False)
        batch_op.create_index('idx_audit_log_operator', ['operator_id', 'created_at'], unique=False)
        batch_op.create_index('idx_audit_log_resource', ['resource_type', 'resource_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_permission_audit_logs_created_at'), ['created_at'], unique=False)

    op.create_table('permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('group', sa.String(length=64), nullable=True),
    sa.Column('category', sa.String(length=64), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('permission_type', sa.Enum('read', 'write', 'delete', 'admin', 'custom'), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('dependencies', mysql.JSON(), nullable=True),
    sa.Column('conflicts', mysql.JSON(), nullable=True),
    sa.Column('version', sa.String(length=16), nullable=False),
    sa.Column('is_deprecated', sa.Boolean(), nullable=False),
    sa.Column('permission_metadata', mysql.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('level >= 1', name='chk_permission_level_positive'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.create_index('idx_permissions_group_category', ['group', 'category'], unique=False)
        batch_op.create_index('idx_permissions_type_level', ['permission_type', 'level'], unique=False)
        batch_op.create_index(batch_op.f('ix_permissions_category'), ['category'], unique=False)
        batch_op.create_index(batch_op.f('ix_permissions_group'), ['group'], unique=False)
        batch_op.create_index(batch_op.f('ix_permissions_name'), ['name'], unique=True)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('server_id', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('role_type', sa.Enum('system', 'custom', 'inherited'), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('role_metadata', mysql.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('deleted_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('priority >= 0', name='chk_role_priority_positive'),
    sa.ForeignKeyConstraint(['parent_id'], ['roles.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index('idx_roles_parent_active', ['parent_id', 'is_active'], unique=False)
        batch_op.create_index('idx_roles_server_active', ['server_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_roles_deleted_at'), ['deleted_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_roles_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_roles_server_id'), ['server_id'], unique=False)

    op.create_table('server_members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('server_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('server_id', 'user_id', name='uq_server_user')
    )
    op.create_table('servers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=False),
    sa.Column('is_super_admin', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('role_permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('expression', sa.Text(), nullable=True),
    sa.Column('conditions', mysql.JSON(), nullable=True),
    sa.Column('scope_type', sa.Enum('global', 'server', 'channel', 'resource'), nullable=False),
    sa.Column('scope_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role_id', 'permission_id', 'scope_type', 'scope_id', name='uq_role_permission_scope')
    )
    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.create_index('idx_role_permissions_scope', ['role_id', 'scope_type', 'scope_id'], unique=False)

    op.create_table('user_roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('valid_from', sa.DateTime(), nullable=False),
    sa.Column('valid_until', sa.DateTime(), nullable=True),
    sa.Column('conditions', mysql.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'role_id', name='uq_user_role')
    )
    with op.batch_alter_table('user_roles', schema=None) as batch_op:
        batch_op.create_index('idx_user_roles_active', ['user_id', 'role_id', 'valid_until'], unique=False)
        batch_op.create_index('idx_user_roles_valid', ['user_id', 'valid_from', 'valid_until'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_roles_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_roles_user_id'))
        batch_op.drop_index('idx_user_roles_valid')
        batch_op.drop_index('idx_user_roles_active')

    op.drop_table('user_roles')
    with op.batch_alter_table('role_permissions', schema=None) as batch_op:
        batch_op.drop_index('idx_role_permissions_scope')

    op.drop_table('role_permissions')
    op.drop_table('users')
    op.drop_table('servers')
    op.drop_table('server_members')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_server_id'))
        batch_op.drop_index(batch_op.f('ix_roles_name'))
        batch_op.drop_index(batch_op.f('ix_roles_is_active'))
        batch_op.drop_index(batch_op.f('ix_roles_deleted_at'))
        batch_op.drop_index('idx_roles_server_active')
        batch_op.drop_index('idx_roles_parent_active')

    op.drop_table('roles')
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_permissions_name'))
        batch_op.drop_index(batch_op.f('ix_permissions_group'))
        batch_op.drop_index(batch_op.f('ix_permissions_category'))
        batch_op.drop_index('idx_permissions_type_level')
        batch_op.drop_index('idx_permissions_group_category')

    op.drop_table('permissions')
    with op.batch_alter_table('permission_audit_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_permission_audit_logs_created_at'))
        batch_op.drop_index('idx_audit_log_resource')
        batch_op.drop_index('idx_audit_log_operator')
        batch_op.drop_index('idx_audit_log_operation')

    op.drop_table('permission_audit_logs')
    op.drop_table('friendships')
    op.drop_table('channels')
    # ### end Alembic commands ###
